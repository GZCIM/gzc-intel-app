# GZCIM Core Container: Essential services
# Includes: gzc-intel-app frontend + FXSpotStream backend

# Stage 1: Build React Frontend (gzc-intel-app)
FROM node:20-alpine as frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY package*.json ./
RUN npm ci

# Copy frontend source files
COPY . .

# Build the frontend
RUN npm run build:skip-ts

# Stage 2: Python Dependencies
FROM python:3.11-slim as python-deps

WORKDIR /app/deps

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    unixodbc-dev \
    curl \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# Install Microsoft ODBC Driver for SQL Server
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y msodbcsql17

# Copy FXSpotStream requirements and install
COPY ../FXSpotStream/requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Stage 3: Production Container
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    unixodbc-dev \
    curl \
    gnupg \
    redis-server \
    && rm -rf /var/lib/apt/lists/*

# Install Microsoft ODBC Driver for SQL Server
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y msodbcsql17

# Copy Python dependencies
COPY --from=python-deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-deps /usr/local/bin /usr/local/bin

# Copy built frontend
COPY --from=frontend-builder /app/frontend/dist /var/www/html

# Copy FXSpotStream backend
COPY ../FXSpotStream/ /app/backend/

# Create startup script for FXSpotStream
RUN echo '#!/bin/bash\ncd /app/backend\nexport FLASK_PORT=5100\npython run.py' > /app/start-backend.sh \
    && chmod +x /app/start-backend.sh

# Create nginx configuration with WebSocket support
RUN echo 'server { \
    listen 3500; \
    server_name localhost; \
    root /var/www/html; \
    index index.html; \
    \
    # Frontend routing \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # WebSocket endpoints \
    location /ws_esp { \
        proxy_pass http://localhost:5100; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_connect_timeout 60s; \
        proxy_send_timeout 60s; \
        proxy_read_timeout 60s; \
        proxy_buffering off; \
    } \
    \
    location /ws_rfs { \
        proxy_pass http://localhost:5100; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_connect_timeout 60s; \
        proxy_send_timeout 60s; \
        proxy_read_timeout 60s; \
        proxy_buffering off; \
    } \
    \
    location /ws_execution { \
        proxy_pass http://localhost:5100; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_connect_timeout 60s; \
        proxy_send_timeout 60s; \
        proxy_read_timeout 60s; \
        proxy_buffering off; \
    } \
    \
    # API endpoints \
    location /api/ { \
        proxy_pass http://localhost:5100/; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
}' > /etc/nginx/sites-available/default

# Remove default nginx config and enable our config
RUN rm -f /etc/nginx/sites-enabled/default \
    && ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/

# Create supervisor configuration for multi-service container
RUN echo '[supervisord] \
nodaemon=true \
user=root \
logfile=/var/log/supervisord.log \
\
[program:nginx] \
command=nginx -g "daemon off;" \
autostart=true \
autorestart=true \
stderr_logfile=/var/log/nginx.err.log \
stdout_logfile=/var/log/nginx.out.log \
\
[program:redis] \
command=redis-server --bind 127.0.0.1 --port 6379 \
autostart=true \
autorestart=true \
stderr_logfile=/var/log/redis.err.log \
stdout_logfile=/var/log/redis.out.log \
\
[program:fxspotstream] \
command=/app/start-backend.sh \
directory=/app/backend \
autostart=true \
autorestart=true \
stderr_logfile=/var/log/fxspotstream.err.log \
stdout_logfile=/var/log/fxspotstream.out.log \
environment=PYTHONPATH="/app/backend",FLASK_PORT="5100" \
' > /etc/supervisor/conf.d/supervisord.conf

# Expose port
EXPOSE 3500

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3500/ || exit 1

# Start all services with supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]